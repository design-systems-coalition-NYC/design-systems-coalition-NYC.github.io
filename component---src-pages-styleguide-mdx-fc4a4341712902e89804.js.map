{"version":3,"sources":["webpack:///./src/components/Colors.js","webpack:///./src/components/Typography.js","webpack:///./src/components/Iframe.js","webpack:///./src/pages/styleguide.mdx"],"names":["Chip","name","value","onChange","sx","width","height","paddingBottom","bg","outline","type","fontFamily","fontSize","color","border","m","p","e","target","props","useThemeUI","theme","setTheme","colors","Object","keys","filter","key","map","next","mx","flexWrap","length","n","fonts","fontSizes","sizes","reverse","size","i","fontWeight","overflowX","whiteSpace","parseInt","position","overflow","allowFullScreen","top","bottom","left","_frontmatter","layoutProps","MDXLayout","Layout","MDXContent","components","mdxType","Colors","Typography","parentName","Iframe","title","src","isMDXComponent"],"mappings":"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","file":"component---src-pages-styleguide-mdx-fc4a4341712902e89804.js","sourcesContent":["/** @jsx jsx */\nimport {\n  jsx,\n  Flex,\n  Box,\n  useThemeUI,\n} from 'theme-ui'\n\nconst Chip = ({\n  name,\n  value,\n  onChange,\n}) =>\n  <div>\n    <div\n      sx={{\n        width: '100%',\n        height: 0,\n        paddingBottom: '100%',\n        bg: name,\n        outline: '1px solid',\n      }}\n    />\n    <label>\n      <div>{name}</div>\n      <input\n        type='text'\n        value={value}\n        sx={{\n          fontFamily: 'monospace',\n          fontSize: 2,\n          color: 'inherit',\n          bg: 'transparent',\n          border: 0,\n          m: 0,\n          p: 0,\n          ':focus': {\n            outline: '1px solid',\n          }\n        }}\n        onChange={e => {\n          onChange({ [name]: e.target.value })\n        }}\n      />\n    </label>\n  </div>\n\nexport default props => {\n  const { theme, setTheme } = useThemeUI()\n\n  const colors = Object.keys(theme.colors)\n    .filter(key => typeof theme.colors[key] === 'string')\n    .map(key => ({\n      name: key,\n      value: theme.colors[key],\n      onChange: next => {\n        setTheme({ colors: next })\n      }\n    }))\n\n  return (\n    <div>\n      <Flex\n        sx={{\n          mx: -3,\n          flexWrap: 'wrap',\n        }}>\n        {colors.map(color => (\n          <Box\n            key={color.name}\n            sx={{\n              p: 3,\n              width: [ 1/2, 1/3, 1 / colors.length ].map(n => (n * 100) + '%'),\n            }}>\n            <Chip {...color} />\n          </Box>\n        ))}\n      </Flex>\n    </div>\n  )\n}\n","/** @jsx jsx */\nimport { jsx, useThemeUI } from 'theme-ui'\n\nexport default props => {\n  const { theme, setTheme } = useThemeUI()\n  const { fonts, fontSizes } = theme\n\n  const sizes = [ ...fontSizes ].reverse()\n\n  return (\n    <div>\n      {Object.keys(fonts).map(key => (\n        <div key={key}>\n          <label>\n            {key}:\n            <input\n              type='text'\n              value={fonts[key]}\n              sx={{\n                fontFamily: key,\n                fontSize: 5,\n                border: 0,\n                width: '100%',\n                bg: 'transparent',\n                color: 'inherit',\n                ':focus': {\n                  outline: '2px solid',\n                }\n              }}\n              onChange={e => {\n                setTheme({\n                  fonts: {\n                    [key]: e.target.value\n                  }\n                })\n              }}\n            />\n          </label>\n        </div>\n      ))}\n      {sizes.map((size, i) => (\n        <div\n          key={i}\n          sx={{\n            fontSize: size,\n            fontWeight: 'bold',\n            overflowX: 'hidden',\n            whiteSpace: 'nowrap',\n          }}>\n          <label>\n            <input\n              type='number'\n              value={size}\n              sx={{\n                width: '2.5em',\n                fontSize: 'inherit',\n                fontWeight: 'inherit',\n                color: 'inherit',\n                bg: 'transparent',\n                p: 0,\n                m: 0,\n                border: 0,\n                ':focus': {\n                  outline: '1px solid',\n                }\n              }}\n              onChange={e => {\n                const n = parseInt(e.target.value)\n                const next = [...fontSizes]\n                next[sizes.length - i - 1] = n\n                setTheme({\n                  fontSizes: next\n                })\n              }}\n            />\n            Hamburgefonz\n          </label>\n        </div>\n      ))}\n    </div>\n  )\n}\n","/** @jsx jsx */\nimport { jsx } from 'theme-ui'\n\nexport default props =>\n  <div\n    sx={{\n      width: '100%',\n      height: 0,\n      paddingBottom: (900 / 16) + '%',\n      position: 'relative',\n      overflow: 'hidden',\n      outline: '1px solid',\n    }}>\n    <iframe\n      allowFullScreen\n      {...props}\n      sx={{\n        position: 'absolute',\n        width: '100%',\n        height: '100%',\n        top: 0,\n        bottom: 0,\n        left: 0,\n        border: 0\n      }}\n    />\n  </div>\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Layout from '../layout';\nimport Colors from '../components/Colors';\nimport Typography from '../components/Typography';\nimport Iframe from '../components/Iframe';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = Layout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"style-guide\"\n    }}>{`Style Guide`}</h1>\n    <h2 {...{\n      \"id\": \"colors\"\n    }}>{`Colors`}</h2>\n    <Colors mdxType=\"Colors\" />\n    <h2 {...{\n      \"id\": \"typography\"\n    }}>{`Typography`}</h2>\n    <Typography mdxType=\"Typography\" />\n    <p>{`Reset theme customizations:\n`}<inlineCode parentName=\"p\">{`<ResetTheme />`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"logos\"\n    }}>{`Logos`}</h2>\n    <Iframe title='figma' src='https://www.figma.com/embed?embed_host=share&url=https://www.figma.com/file/QaYbQ2LGdA3lefOWZCosDcrt/DSC-NYC-logos' mdxType=\"Iframe\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}